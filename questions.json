[
  {
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ]
  },
  {
    "id": 2,
    "title": "Best Time to Buy and Sell Stock",
    "description": "Given an array prices where prices[i] is the price of a given stock on the ith day, find the maximum profit you can achieve. You may complete at most one transaction.",
    "examples": [
      { "input": "prices = [7,1,5,3,6,4]", "output": "5" }
    ],
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ]
  },
  {
    "id": 3,
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "examples": [
      { "input": "s = '()[]{}'", "output": "true" }
    ],
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ]
  },
  {
    "id": 4,
    "title": "Merge Intervals",
    "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "examples": [
      { "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]", "output": "[[1,6],[8,10],[15,18]]" }
    ],
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= starti <= endi <= 10^4"
    ]
  },
  {
    "id": 5,
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "examples": [
      { "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]", "output": "6" }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ]
  },
  {
    "id": 6,
    "title": "Invert Binary Tree",
    "description": "Given the root of a binary tree, invert the tree, and return its root.",
    "examples": [
      { "input": "root = [4,2,7,1,3,6,9]", "output": "[4,7,2,9,6,3,1]" }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100]",
      "-100 <= Node.val <= 100"
    ]
  },
  {
    "id": 7,
    "title": "Binary Search",
    "description": "Given a sorted array of n integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    "examples": [
      { "input": "nums = [1,3,5,6], target = 5", "output": "2" }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i], target <= 10^4",
      "nums is sorted in ascending order."
    ]
  },
  {
    "id": 8,
    "title": "Linked List Cycle",
    "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it.",
    "examples": [
      { "input": "head = [3,2,0,-4], pos = 1", "output": "true" }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 10^4]",
      "-10^5 <= Node.val <= 10^5"
    ]
  },
  {
    "id": 9,
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.",
    "examples": [
      { "input": "root = [6,2,8,0,4,7,9, null, null, 3,5], p = 2, q = 8", "output": "6" }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [2, 10^5]",
      "-10^9 <= Node.val <= 10^9"
    ]
  },
  {
    "id": 10,
    "title": "Course Schedule",
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. Some courses may have prerequisites. Given the total number of courses and a list of prerequisite pairs, return true if you can finish all courses.",
    "examples": [
      { "input": "numCourses = 2, prerequisites = [[1,0]]", "output": "true" }
    ],
    "constraints": [
      "1 <= numCourses <= 2000",
      "0 <= prerequisites.length <= 5000",
      "prerequisites[i].length == 2"
    ]
  }
] 